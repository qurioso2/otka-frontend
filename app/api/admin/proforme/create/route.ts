import { NextRequest, NextResponse } from 'next/server';
import { getServerSupabase } from '@/app/auth/server';

export async function POST(request: NextRequest) {
  try {
    const supabase = await getServerSupabase();
    const body = await request.json();
    console.log('Creating proforma with data:', body);

    const {
      client_type,
      client_name,
      client_email,
      client_company,
      client_cui,
      client_address,
      client_notes,
      currency,
      items = [],
      // Also accept the old format for compatibility
      customer_name,
      customer_email,
      customer_company,
      customer_cui,
      customer_address,
      notes,
    } = body;

    // Use new format or fallback to old format
    const finalCustomerName = client_name || customer_name;
    const finalCustomerEmail = client_email || customer_email;
    const finalCustomerCompany = client_company || customer_company;
    const finalCustomerCui = client_cui || customer_cui;
    const finalCustomerAddress = client_address || customer_address;
    const finalNotes = client_notes || notes;

    console.log('Processed data:', {
      finalCustomerName,
      finalCustomerEmail,
      finalCustomerCompany,
      itemsCount: items.length
    });

    // Validation
    if (!finalCustomerName || !finalCustomerEmail) {
      return NextResponse.json(
        { success: false, error: 'Customer name and email are required' },
        { status: 400 }
      );
    }

    if (!items || items.length === 0) {
      return NextResponse.json(
        { success: false, error: 'At least one item is required' },
        { status: 400 }
      );
    }

    // Calculate totals
    const subtotal = items.reduce((sum: number, item: any) => {
      return sum + (item.unit_price * item.quantity);
    }, 0);

    // VAT calculation based on items
    const vat_amount = items.reduce((sum: number, item: any) => {
      const itemSubtotal = item.unit_price * item.quantity;
      return sum + (itemSubtotal * (item.tax_rate_value || 21) / 100);
    }, 0);
    
    const total = subtotal + vat_amount;

    // Let Supabase auto-generate the number (set to NULL - trigger will handle)
    // This will create sequential numbering: 1, 2, 3...
    
    console.log('Using auto-increment from Supabase trigger');

    // Insert proforma - let trigger auto-generate number
    const { data: proforma, error: proformaError } = await supabase
      .from('proforme')
      .insert({
        series: 'OTK',
        // number: NULL (will be auto-generated by trigger as 1, 2, 3...)
        client_type: 'PF', // Default to person
        client_name: finalCustomerName,
        client_email: finalCustomerEmail,
        client_address: finalCustomerAddress,
        client_cui: finalCustomerCui,
        currency: currency || 'RON',
        notes: finalNotes,
        subtotal_no_vat: subtotal,
        total_vat: vat_amount,
        total_with_vat: total,
        status: 'pending',
      })
      .select()
      .single();

    if (proformaError) {
      console.error('Error creating proforma:', proformaError);
      return NextResponse.json(
        { success: false, error: proformaError.message },
        { status: 500 }
      );
    }

    // Insert proforma items
    if (proforma) {
      const itemsWithProformaId = items.map((item: any) => ({
        proforma_id: proforma.id,
        product_id: item.product_id,
        sku: item.sku,
        name: item.name,
        quantity: item.quantity,
        unit_price: item.unit_price,
        tax_rate_id: item.tax_rate_id || 1,
        tax_rate_value: item.tax_rate_value || 21,
      }));

      const { data: insertedItems, error: itemsError } = await supabase
        .from('proforma_items') // Note: singular 'proforma_items' not 'proforme_items'
        .insert(itemsWithProformaId)
        .select();

      if (itemsError) {
        console.error('Error creating proforma items:', itemsError);
        // Rollback proforma creation
        await supabase.from('proforme').delete().eq('id', proforma.id);
        return NextResponse.json(
          { success: false, error: itemsError.message },
          { status: 500 }
        );
      }

      return NextResponse.json({
        success: true,
        data: {
          proforma,
          items: insertedItems,
        },
      });
    }

    return NextResponse.json(
      { success: false, error: 'Failed to create proforma' },
      { status: 500 }
    );
  } catch (error: any) {
    console.error('Error in proforme/create:', error);
    return NextResponse.json(
      { success: false, error: error.message || 'Internal server error' },
      { status: 500 }
    );
  }
}
