import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabaseClient';

export async function POST(request: NextRequest) {
  try {
    const supabase = createClient();
    const body = await request.json();

    const {
      client_type,
      client_name,
      client_cui,
      client_reg_com,
      client_address,
      client_city,
      client_county,
      client_country,
      client_phone,
      client_email,
      currency,
      client_notes,
      notes,
      items, // Array of { product_id, sku, name, description, quantity, unit_price, tax_rate_id, tax_rate_value }
    } = body;

    // Validate
    if (!client_type || !client_name || !items || items.length === 0) {
      return NextResponse.json(
        { success: false, error: 'client_type, client_name, and items are required' },
        { status: 400 }
      );
    }

    // Create proforma (number will be auto-generated by trigger)
    const { data: proforma, error: proformaError } = await supabase
      .from('proforme')
      .insert({
        client_type,
        client_name,
        client_cui: client_cui || null,
        client_reg_com: client_reg_com || null,
        client_address: client_address || null,
        client_city: client_city || null,
        client_county: client_county || null,
        client_country: client_country || 'RomÃ¢nia',
        client_phone: client_phone || null,
        client_email: client_email || null,
        currency: currency || 'RON',
        client_notes: client_notes || null,
        notes: notes || null,
        status: 'pending',
      })
      .select()
      .single();

    if (proformaError) {
      console.error('Error creating proforma:', proformaError);
      return NextResponse.json(
        { success: false, error: proformaError.message },
        { status: 500 }
      );
    }

    // Create proforma items
    const itemsToInsert = items.map((item: any, index: number) => ({
      proforma_id: proforma.id,
      product_id: item.product_id || null,
      sku: item.sku || null,
      name: item.name,
      description: item.description || null,
      quantity: item.quantity,
      unit_price: parseFloat(item.unit_price),
      tax_rate_id: item.tax_rate_id,
      tax_rate_value: parseFloat(item.tax_rate_value),
      sort_order: index,
    }));

    const { data: insertedItems, error: itemsError } = await supabase
      .from('proforma_items')
      .insert(itemsToInsert)
      .select();

    if (itemsError) {
      console.error('Error creating proforma items:', itemsError);
      // Rollback: delete proforma
      await supabase.from('proforme').delete().eq('id', proforma.id);
      return NextResponse.json(
        { success: false, error: itemsError.message },
        { status: 500 }
      );
    }

    // Totals are auto-calculated by triggers
    // Fetch updated proforma
    const { data: updatedProforma } = await supabase
      .from('proforme')
      .select('*')
      .eq('id', proforma.id)
      .single();

    return NextResponse.json({
      success: true,
      data: {
        ...updatedProforma,
        items: insertedItems,
      },
    });
  } catch (error: any) {
    console.error('Error in proforme/create:', error);
    return NextResponse.json(
      { success: false, error: error.message || 'Internal server error' },
      { status: 500 }
    );
  }
}
